name: 'Increment Release Version'
description: 'Automatically increment version upon merging to main/master branch'
inputs:
  github_token:
    description: "Normal GitHub Token for authentication"
    required: true
  release_pat:
    description: "Personal access token for creating a release, so github actions run"
    required: true
  pr_title:
    description: "Title of the merged PR"
    required: true
  pr_url:
    description: "URL to the merged PR"
    required: true
  repository:
    description: "The repository of the merged PR"
    required: true
  trunk_branch:
    description: "Name of the trunk branch (e.g., main or master)."
    required: false
    default: "master"
  slack-github-token:
    description: "The github token to use when calling the Slack notification action"
    required: false
  slack-webhook-url:
    description: "The webhook URL to use when calling the Slack notification action"
    required: false

runs:
  using: "composite"
  steps:

    - name: Get latest release
      shell: "bash"
      id: get_latest
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` | sed 's/^v//')
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

    - name: Determine new version
      shell: "bash"
      id: increment
      run: |
        latest_tag="${{ env.latest_tag }}"
        major=$(echo $latest_tag | cut -d'.' -f1)
        minor=$(echo $latest_tag | cut -d'.' -f2)
        patch=$(echo $latest_tag | cut -d'.' -f3)

        PR_TITLE="${{ inputs.pr_title }}"

        if [[ "$PR_TITLE" == "[major]"* ]]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [[ "$PR_TITLE" == "[minor]"* ]]; then
          minor=$((minor + 1))
          patch=0
        else
          # Default to minor increment or patch if [patch] in title
          if [[ "$PR_TITLE" == "[patch]"* ]]; then
            patch=$((patch + 1))
          else
            minor=$((minor + 1))
            patch=0
          fi
        fi

        new_version="$major.$minor.$patch"
        echo "new_version=$new_version" >> $GITHUB_ENV

    # // TODO slack release notification

    - name: Increment pom.xml
      shell: "bash"
      run: |
        
        NEW_VERSION=${{ env.new_version }}
        TRUNK_BRANCH=${{ inputs.trunk_branch }}
        
        # Update and commit `pom.xml`
        if [ -f "pom.xml" ]; then
          echo "Updating pom.xml with new version: $NEW_VERSION"
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false
        
          echo "Setting git config"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
        
          echo "Adding pom.xml to git"
          git add pom.xml
          echo "Committing changes"
          git commit -m "Update pom.xml to $NEW_VERSION"
          echo "Pushing changes to $TRUNK_BRANCH"
          git push origin HEAD:"$TRUNK_BRANCH"
        fi

    - name: Create a Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ inputs.release_pat }}
        tag: ${{ env.new_version }}
        commit: ${{ inputs.trunk_branch }}
        body: ${{ inputs.pr_title }} (${{ inputs.pr_url }})
#
#    - name: Announce release
#      uses: slackapi/slack-github-action@v2.0.0
#      if: ${{ success() && inputs.slack-github-token != '' }}
#      with:
#        method: chat.postMessage
#        token: ${{ inputs.slack-github-token }}
#        payload: |
#          channel: #dev
#          text: "Releasing `${{ inputs.repository }}` `${{ env.new_version }}` (<${{ inputs.pr_url }}>): ${{ inputs.pr_title }}"